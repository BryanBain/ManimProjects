from manim import *

class MultipleTransformations(Scene):
    def construct(self):
        title = Title("Multiple Transformations")
        self.play(Write(title))
        description = Text("Perform multiple transformations in the following order:"
                        ).move_to(2*UP).scale(0.85)
        self.play(Write(description))
        self.wait()
        step1 = Text("1. Horizontal translations").next_to(description, DOWN)
        self.play(Write(step1))
        step2 = Text("2. Reflections").next_to(step1, DOWN)
        self.play(Write(step2))
        step3 = Text("3. Stretch or compression").next_to(step2, DOWN)
        self.play(Write(step3))
        step4 = Text("4. Vertical translations").next_to(step3, DOWN)
        self.play(Write(step4))
        self.wait()


class MultipleFuncTransformsExampleA(Scene):
    def construct(self):
        plane = NumberPlane().add_coordinates()
        self.add(plane)
        f_func = plane.plot(lambda x: np.sqrt(x), x_range=[0,10]).set_color(YELLOW)
        f_lbl = plane.get_graph_label(graph = f_func, label = Tex("$f(x)=\sqrt{x}$"), direction = UP)
        f_grp = VGroup(f_func, f_lbl)
        self.play(Create(f_grp))
        self.wait()
        g1 = plane.plot(lambda x: np.sqrt(x-3), x_range=[3,10]).set_color(BLUE)
        g1_lbl = plane.get_graph_label(graph = g1, label = Tex("$f(x)=\sqrt{x-3}$"), direction = UP)
        g1_grp = VGroup(g1, g1_lbl)
        self.play(Transform(f_grp, g1_grp), run_time=2)
        self.wait()
        g2 = plane.plot(lambda x: -1*np.sqrt(x-3), x_range=[3,10]).set_color(ORANGE)
        g2_lbl = plane.get_graph_label(graph = g2, label = Tex("$f(x)=-\sqrt{x-3}$"), direction = DOWN)
        g2_grp = VGroup(g2, g2_lbl)
        self.play(Transform(f_grp, g2_grp), run_time=2)
        self.wait()
        g_func = plane.plot(lambda x: -2*np.sqrt(x-3), x_range=[3,10]).set_color(GREEN)
        g_lbl = plane.get_graph_label(graph = g_func, label = Tex("$g(x)=-2\sqrt{x-3}$"), direction = UP)
        g_grp = VGroup(g_func, g_lbl)
        self.play(Transform(f_grp, g_grp))
        self.wait()

class MultipleFuncTransformsExampleB(Scene):
    def construct(self):
        plane = NumberPlane().add_coordinates()
        self.add(plane)
        f_func = plane.plot(lambda x: np.power(x,2)).set_color(YELLOW)
        f_lbl = plane.get_graph_label(graph = f_func, label = Tex("$f(x)=x^2$"), direction = RIGHT)
        f_grp = VGroup(f_func, f_lbl)
        self.play(Create(f_grp))
        self.wait()
        g1 = plane.plot(lambda x: np.power(x+3,2)).set_color(BLUE)
        g1_lbl = plane.get_graph_label(graph = g1, label = Tex("$f(x)=(x+3)^2$"), direction = RIGHT)
        g1_grp = VGroup(g1, g1_lbl)
        self.play(Transform(f_grp, g1_grp), run_time=2)
        self.wait()
        g_func = plane.plot(lambda x: 0.5*np.power(x+3,2)).set_color(ORANGE)
        g_lbl = plane.get_graph_label(graph = g_func, label = Tex("$g(x)=\\frac{1}{2}(x+3)^2$"), direction = RIGHT)
        g_grp = VGroup(g_func, g_lbl)
        self.play(Transform(f_grp, g_grp))
        self.wait()

class MultipleFuncTransformsExampleC(Scene):
    def construct(self):
        plane = NumberPlane().add_coordinates()
        self.add(plane)
        f_func = plane.plot(lambda x: np.abs(x)).set_color(YELLOW)
        f_lbl = plane.get_graph_label(graph = f_func, label = Tex("$f(x)=|x|$"), direction = UR)
        f_grp = VGroup(f_func, f_lbl)
        self.play(Create(f_grp))
        self.wait()
        g1 = plane.plot(lambda x: np.abs(x+2)).set_color(BLUE)
        g1_lbl = plane.get_graph_label(graph = g1, label = Tex("$f(x)=|x+2|$"), direction = UR)
        g1_grp = VGroup(g1, g1_lbl)
        self.play(Transform(f_grp, g1_grp), run_time=2)
        self.wait()
        g2 = plane.plot(lambda x: np.abs(-1*x+2)).set_color(ORANGE)
        g2_lbl = plane.get_graph_label(graph = g2, label = Tex("$f(x)=|-x+2|$"), direction = UL)
        g2_grp = VGroup(g2, g2_lbl)
        self.play(Transform(f_grp, g2_grp), run_time=2)
        self.wait()
        g_func = plane.plot(lambda x: np.abs(-1*x+2)+1).set_color(GREEN)
        g_lbl = plane.get_graph_label(graph = g_func, label = Tex("$g(x)=|-x+2|+1$"), direction = UL)
        g_grp = VGroup(g_func, g_lbl)
        self.play(Transform(f_grp, g_grp))
        self.wait()

class MultipleFuncTransformsExampleD(Scene):
    def construct(self):
        plane = NumberPlane().add_coordinates()
        self.add(plane)
        f_func = plane.plot(lambda x: np.power(x,3)).set_color(YELLOW)
        f_lbl = plane.get_graph_label(graph = f_func, label = Tex("$f(x)=x^3$"), direction = UR)
        f_grp = VGroup(f_func, f_lbl)
        self.play(Create(f_grp))
        self.wait()
        g1 = plane.plot(lambda x: np.power(x-2,3)).set_color(BLUE)
        g1_lbl = plane.get_graph_label(graph = g1, label = Tex("$f(x)=(x-2)^3$")).move_to(plane.c2p(4,2.5))
        g1_grp = VGroup(g1, g1_lbl)
        self.play(Transform(f_grp, g1_grp), run_time=2)
        self.wait()
        g2 = plane.plot(lambda x: np.power(-1*(x-2),3)).set_color(ORANGE)
        g2_lbl = plane.get_graph_label(graph = g2, label = Tex("$f(x)=-(x-2)^3$")).move_to(plane.c2p(3.75,-2.5))
        g2_grp = VGroup(g2, g2_lbl)
        self.play(Transform(f_grp, g2_grp), run_time=2)
        self.wait()
        g3 = plane.plot(lambda x: np.power(-0.2*(x-2),3)).set_color(PURPLE)
        g3_lbl = plane.get_graph_label(graph = g3, label = Tex("$f(x)=-\\frac{1}{5}(x-2)^3$")).move_to(plane.c2p(3,-1.75))
        g3_grp = VGroup(g3, g3_lbl)
        self.play(Transform(f_grp, g3_grp))
        self.wait()
        g_func = plane.plot(lambda x: np.power(-0.2*(x-2),3)-3).set_color(GREEN)
        g_lbl = plane.get_graph_label(graph = g_func, label = Tex("$g(x)=-\\frac{1}{5}(x-2)^3-3$")).move_to(plane.c2p(3,-1.5))
        g_grp = VGroup(g_func, g_lbl)
        self.play(Transform(f_grp, g_grp))
        self.wait()